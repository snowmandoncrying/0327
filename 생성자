@ byte [] 배열을 문자열로 변환하는 생성자
String str = new String(byte[] bytes);   // 배열 전체를 String 객체 생성
String str = new String(byte[] bytes, String charsetName);  // 지정한 문자셋으로 디코딩

String str = new String(byte[] bytes, inf offset, int length);   // 배열의 offset 인덱스 위치부터 length 개수만큼 String 객체 생성
String str = new String(byte[] bytes, inf offset, int length, String charsetName);  // 지정한 문자셋으로 디코딩

키보드로부터 읽은 바이트 배열을 문자열로 변환
입력내용은 Hello인데 바이트 배열 내용은 72, 101, 108, 108, 111 으로 바뀌는 것이다.

@ String 메소드

리턴타입 - 메소드명(매개변수)
char - charAt(int index) : 특정 위치의 문자를 리턴 (매개 값으로 주어진 인덱스의 문자를 리턴한다.)
boolean - equals(Object anObject) : 두 문자열을 비교 -> (==연산자를 사용하면 원하지 않는 결과가 발생한다)
byte[] - getBytes() : byte[]로 리턴 (시스템의 기본 문자셋으로 인코딩된 바이트 배열 얻기)
byte[] - getBytes(Charset charset) : 주어진 문자셋으로 인코딩한 byte로 리턴 (특정 문자셋으로 인코딩 된 바이트 배열 얻기)  EUC-KR/ UTF-8 (인코딩과 디코딩이 동일하지 않으면 파일이 깨짐)
int - indexOf(String str) : 문자열 내에서 주어진 문자열의 위치를 리턴 (문자열 찾기, 주어진 문자열이 포함되어 있지 않으면 -1을 리턴함, 특정 문자열이 포함되어 있는지 여부에 따라 실행코드를 달리할 때 사용함)
int - length() : 총 문자의 수를 리턴 (문자의 길이, 공백도 문자에 포함됨)
String - replace( CharSequence target, CharSequence replacement) : target 부분을 replacement로 대치한 새로운 문자열을 리턴 (문자열 대치)
String - substring(int beginIndex) : 시작과 끝 인덱스 사이의 문자열 추출 (문자열 잘라내기)
String - substring(int beginIndex, int endIndex) : 시작부터 마지막까지 문자열 추출
String - toLowerCase()
String - toUpperCase()
String - trim()
String - valueOf(int i) / (double d) 등 다양한 매개변수가 올 수 있음

